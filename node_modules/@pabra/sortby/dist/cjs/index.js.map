{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;AAWA,SAAS,OAAO,CAAC,IAAS,EAAE,KAAU;IACpC,OAAO,IAAI,GAAG,KAAK,CAAC;AACtB,CAAC;AAED,SAAS,SAAS,CAAC,IAAS,EAAE,KAAU;IACtC,OAAO,IAAI,GAAG,KAAK,CAAC;AACtB,CAAC;AAED,SAAS,UAAU,CAAC,IAAS,EAAE,KAAU;IAEvC,OAAO,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAkB,CAAC;QAC9C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,GAAoB,CAAC;aAC7B,CAAC;AACrB,CAAC;AAED,SAAS,WAAW,CAAC,IAAS,EAAE,KAAU;IAExC,OAAO,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,GAAoB,CAAC;QAChD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAkB,CAAC;aAC3B,CAAC;AACrB,CAAC;AAED,SAAgB,EAAE,CAChB,GAAG,IAA4D;IAE/D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QAC7B,MAAM,CAAC,cAAc,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YACtD,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,CAAC,KAAK,EAAE,KAAc,CAAC,CAAC;QAE5B,MAAM,SAAS,GACb,OAAO,cAAc,KAAK,UAAU;YAClC,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,CAAC,KAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,cAAyB,CAAC,CAAC;QAErD,OAAO,CAAC,SAAS,EAAE,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAU,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,IAAiB,EAAE,KAAkB,EAAE,EAAE;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAE5C,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAE,CAAC;YACnC,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAEtD,IAAI,MAAM,MAAqB,EAAE;gBAC/B,OAAO,MAAM,CAAC;aACf;SACF;QAED,SAAwB;IAC1B,CAAC,CAAC;AACJ,CAAC;AA7BD,gBA6BC","sourcesContent":["type AnyRecord = Record<string, any>;\ntype Direction = 'asc' | 'desc';\ntype KeyOrExtractor<T extends AnyRecord> = ((thing: T) => T[keyof T]) | keyof T;\ntype KeyDirectionTuple<T extends AnyRecord> = [KeyOrExtractor<T>, Direction];\n\nconst enum Comparison {\n  lower = -1,\n  greater = 1,\n  equal = 0,\n}\n\nfunction isLower(left: any, right: any): boolean {\n  return left < right;\n}\n\nfunction isGreater(left: any, right: any): boolean {\n  return left > right;\n}\n\nfunction compareAsc(left: any, right: any): Comparison {\n  // prettier-ignore\n  return isLower(left, right) ? Comparison.lower :\n    isGreater(left, right) ? Comparison.greater :\n    Comparison.equal;\n}\n\nfunction compareDesc(left: any, right: any): Comparison {\n  // prettier-ignore\n  return isLower(left, right) ? Comparison.greater :\n    isGreater(left, right) ? Comparison.lower :\n    Comparison.equal;\n}\n\nexport function by<T extends AnyRecord>(\n  ...keys: Readonly<(KeyDirectionTuple<T> | KeyOrExtractor<T>)[]>\n): (left: Readonly<T>, right: Readonly<T>) => Comparison {\n  const chain = keys.map(entry => {\n    const [keyOrExtractor, direction] = Array.isArray(entry)\n      ? entry\n      : [entry, 'asc' as const];\n\n    const extractor =\n      typeof keyOrExtractor === 'function'\n        ? keyOrExtractor\n        : (thing: T) => thing[keyOrExtractor as keyof T];\n\n    return [extractor, direction === 'asc' ? compareAsc : compareDesc] as const;\n  });\n\n  return (left: Readonly<T>, right: Readonly<T>) => {\n    for (let i = 0, l = chain.length; i < l; i++) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const [extractor, cmp] = chain[i]!;\n      const result = cmp(extractor(left), extractor(right));\n\n      if (result !== Comparison.equal) {\n        return result;\n      }\n    }\n\n    return Comparison.equal;\n  };\n}\n"]}